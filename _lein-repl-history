(name :en)
(keyword "en")
(reader "/Users/davidescobar/projects/clojure/translate/i18n/devise.en.yml")
(require '[clojure.java.io :as io])
(io/reader "/Users/davidescobar/projects/clojure/translate/i18n/devise.en.yml")
(line-seq (io/reader "/Users/davidescobar/projects/clojure/translate/i18n/devise.en.yml"))
(doseq [line (line-seq (io/reader "/Users/davidescobar/projects/clojure/translate/i18n/devise.en.yml"))] (println line)
)
(doseq [line (line-seq (io/reader "/Users/davidescobar/projects/clojure/translate/i18n/devise.en.yml"))] (println line))
(zipmap (range 3) [:a :b :c])
(map-indexes #(println %1 "and" %2) [ "hi" "there" "world" ])
(map-indexed #(println %1 "and" %2) [ "hi" "there" "world" ])
(map-indexed #(%1 "and" %2) [ "hi" "there" "world" ])
(map-indexed #(str %1 "and" %2) [ "hi" "there" "world" ])
(map-indexed #(str %1 " and " %2) [ "hi" "there" "world" ])
(map-indexed (fn [index word] (str %1 " and " %2)) [ "hi" "there" "world" ])
(map-indexed (fn [index word] (str index " and " word)) [ "hi" "there" "world" ])
(map-indexed (fn [index word] (str (inc index) " and " word)) [ "hi" "there" "world" ])
(name :en)
(name "en")
(-
)
(require '[clojure.string :as string])
(-> :en name string/trim (str ":"))
(re-pattern "value2")
(re-pattern (str "value2" "\\s*$"))
(string/blank? "")
(string/blank? "  ")
(string/blank? nil)
(repeatedly 1000 "a")
(repeatedly 1000 #(* %1 2))
(repeatedly 1000 (fn [n] (* n 2)))
exit
(re-seq #"\s*[^#][\w\-'"]+:\s*(.+)" "value2: some other val.")
(re-seq #"\s*[^#][\w\-\'\"]+:\s*(.+)" "value2: some other val.")
(list (re-seq #"\s*[^#][\w\-\'\"]+:\s*(.+)" "value2: some other val."))
(flatten (re-seq #"\s*[^#][\w\-\'\"]+:\s*(.+)" "value2: some other val."))
(re-find #"\s*[^#][\w\-\'\"]+:\s*(.+)" "value2: some other val.")
((re-find #"\s*[^#][\w\-\'\"]+:\s*(.+)" "value2: some other val.") 1)
(last (re-find #"\s*[^#][\w\-\'\"]+:\s*(.+)" "value2: some other val."))
((re-find #"\s*[^#][\w\-\'\"]+:\s*(.+)" "value2: some other val.") 1)
((re-find #"\s*[^#][\w\-\'\"]+:\s*(.+)" "value2: some other val.") 2)
(def hash { "one" "uno", "dos" "two", "tres" "three" }
)
hash
(hash "dos")
(hash "dosX")
("dos" hash)
(Math/round 3.14)
(Math/round 3.14 1)
exit
{}
(class {})
(class #{})
(def cache {})
cache
(assoc :one 1 cache)
(assoc cache :one 1)
cache
(set! cache (assoc cache :one 1))
(def cache (atom {}))
cache
@cache
(swap! cache assoc :one 1)
@cache
(swap! cache assoc :two 2)
@cache
(swap! cache assoc "three" 3)
@cache
exit
(Path/get "/Users/davidescobar" "projects")
(Paths/get "/Users/davidescobar" "projects")
(require '[java.nio.file :as file])
exit
(import '[java.nio.file])
(Paths/get "/Users/davidescobar" "projects")
(Path/get "/Users/davidescobar" "projects")
(import '[java.nio.file :as file])
(import '[java.nio.file])
(import '[java.nio.file.Paths])
(Path/get "/Users/davidescobar" "projects")
(Paths/get "/Users/davidescobar" "projects")
(import java.nio.file.Paths)
(Paths/get "/Users/davidescobar" "projects")
(Paths/get "/Users/davidescobar")
(Paths/get "/Users/davidescobar" "projects")
(Paths/get ["/Users/davidescobar" "projects"])
(Paths/get into-array ["/Users/davidescobar" "projects"])
(Paths/get (to-array ["/Users/davidescobar" "projects"]))
(to-array ["/Users/davidescobar" "projects"])
(Paths/get "/Users/davidescobar" (into-array ["projects"]))
(.get (Paths/get "/Users/davidescobar" (into-array ["projects"])))
(.getPath (Paths/get "/Users/davidescobar" (into-array ["projects"])))
(.getName (Paths/get "/Users/davidescobar" (into-array ["projects"])))
(URI. "http://qa.outbidhq.com")
(URL. "http://qa.outbidhq.com")
(import java.net.URL)
(URL. "http://qa.outbidhq.com")
(Paths.get (URL. "http://qa.outbidhq.com"))
(Paths/get (URL. "http://qa.outbidhq.com"))
(import java.net.URI)
(Paths/get (URI. "http://qa.outbidhq.com"))
(Paths/get (URI. "/Users/davidescobar" "projects"))
(name :en)
(require '[clojure.string :as string])
(string/join [ "hello" "there" "world" ] ", ")
(string/join ", " [ "hello" "there" "world" ])
(string/join "\n" [ "hello" "there" "world" ])
(true? 6)
(true? "hi")
(true? true)
(false? true)
(false? false)
(false? nil)
(nil? nil)
(nil? false)
(nil? "")
exit
(Math/round 3.14159)
(Math/round 3.14159 2)
(Math/round 3.14159 2.0)
exit
(def xform (comp (map inc) (filter even?)))
exit
(def cache { :one 1 :two 2 }
)
cache
(cache :one)
(cache :one4)
(def cache (atom {}))
cache
@cache
(swap! cache assoc "three" 3)
@cache
(@cache "three")
(@cache "threee")
(+ 240 3200)
(* 24 80)
(+ 1920 3200)
exit
(str "This lot has been relisted to lot %{new_lot_num} from seller %{original_seller} to seller %{new_seller}" "\\s*$")
(re-pattern (str "This lot has been relisted to lot %{new_lot_num} from seller %{original_seller} to seller %{new_seller}" "\\s*$"))
(re-quote-replacement (str "This lot has been relisted to lot %{new_lot_num} from seller %{original_seller} to seller %{new_seller}" "\\s*$"))
(require '[clojure.string :as string])
(string/re-quote-replacement (str "This lot has been relisted to lot %{new_lot_num} from seller %{original_seller} to seller %{new_seller}" "\\s*$"))
(string/re-quote-replacement "\s*")
(string/re-quote-replacement "\\s*")
(str (string/re-quote-replacement "\\s*"))
(str (string/re-quote-replacement "\s*"))
(re-escape "^[a-z]$")
(re-pattern "^[a-z]$")
(re-pattern "^[a-z]\s*$")
(re-pattern "^[a-z]\\s*$")
(re-pattern "^[a-z]%{hello}\\s*$")
(re-pattern "^[a-z]\%{hello}\\s*$")
(re-pattern (string/re-quote-replacement "^[a-z]\%{hello}\\s*$"))
(re-pattern "^[a-z]%{hello}\\s*$")
(re-pattern (string/re-quote-replacement "^[a-z]%{hello}\\s*$"))
(re-pattern (string/re-quote-replacement "^[a-z]\%{hello}\\s*$"))
(re-pattern (string/re-quote-replacement "^[a-z]\%{hello}\s*$"))
(re-pattern (string/re-quote-replacement "^[a-z]%%{hello}\s*$"))
(re-pattern (string/re-quote-replacement "^[a-z]%%{hello}\\s*$"))
(string/escape "^[a-z]%{hello}\s*$")
(string/escape "^[a-z]%{hello}\\s*$")
(string/escape "^[a-z]%{hello}\\s*$" { '%' '%' })
(re-pattern (string/escape "^[a-z]%{hello}\\s*$" { '%' '%' }))
(re-pattern (string/escape "^[a-z]%{hello}\\s*$" { '%' '\%' }))
(re-pattern (string/escape "^[a-z]%{hello}\\s*$" { '%' "\%" }))
(re-pattern (string/escape "^[a-z]%{hello}\\s*$" { '%' "\\%" }))
(re-pattern (string/escape "^[a-z]%{hello}\\s*$" { '%' '\\%' }))
(re-pattern "%{hi}")
(re-pattern (string/escape "%{hi}"))
(re-pattern (string/escape "%{hi}" { "{" "\{" "}", \"}"))
(re-pattern (string/escape "%{hi}" { "{" "\{" "}", \"}" }))
(re-pattern (string/escape "%{hi}" { "{" "\{" "}" "\}" }))
(re-pattern (string/escape "%{hi}" { "{" "\\{" "}" "\\}" }))
(re-pattern (string/escape "%{hi}" { "\{" "\\{" "\}" "\\}" }))
exit
(reject #(< % 5) [1 3 5 7 9])
exit
(require '[clojure.string :as string])
(string/blank? "")
(string/blank? "  ")
(string/blank? nil)
(string/blank? false)
exit
(re-find #"%\{\S+\}" "My name is %{first_name} and %{last_name}, yeah!")
(re-seq #"%\{\S+\}" "My name is %{first_name} and %{last_name}, yeah!")
exit
(import '[java.net URL])
(def url (URL. "https://www.googleapis.com/language/translate/v2?q=Add+Member&source=en&target=es&key=AIzaSyAtV9D6xozo7WvAYvnQF0b4oAqQ1QtwJGs"))
url
(str url)
url
(require '[clojure.java.io :as io])
(def buffered-reader (io/reader url))
(require '[clojure.string :as string])
(-> (line-seq buffered-reader) string/join)
exit
(get-translation "is required" "en" "de" "AIzaSyAtV9D6xozo7WvAYvnQF0b4oAqQ1QtwJGs" 1 10)
exit
(get-translation "is required" "en" "de" "AIzaSyAtV9D6xozo7WvAYvnQF0b4oAqQ1QtwJGs" 1 10)
exit
(get-translation "is required" "en" "de" "AIzaSyAtV9D6xozo7WvAYvnQF0b4oAqQ1QtwJGs" 1 10)
(Math/round 2.3)
exit
(get-translation "is required" "en" "de" "AIzaSyAtV9D6xozo7WvAYvnQF0b4oAqQ1QtwJGs" 1 10)
exit
(import '[java.time Duration LocalDateTime])
(def start (LocalDateTime/now))
start
(def end (LocalDateTime/now))
end
(Duration/between start end)
(-> (Duration/between start end) .toMillis (/ 1000))
(System/getCurrentTimeMillis)
(System/getCurrentTimeInMillis)
(System/getCurrentMillis)
(System/currentTimeMillis)
(def start (System/currentTimeMillis))
(def end (System/currentTimeMillis))
(-> (- end start) (/ 1000.0))
(-> (Duration/between start end) .toMillis (/ 1000.0))
(-> (Duration/between start end) .toMillis (/ 1000))
exit
(def value "view")
value
(re-pattern value)
(str (re-pattern value) "\\s*$")
((str (re-pattern value) "\\s*$"))
(re-pattern (str (re-pattern value) "\\s*$"))
(-> value re-pattern (str "\\s*$") re-pattern)
(-> value (str "\\s*$") re-pattern)
(re-pattern (str value "\\s*$"))
clear
exit
(str "view" "\\s*$")
(re-pattern (str "view" "\\s*$"))
(def value-regex (re-pattern (str "view" "\\s*$")))
value-regex
(def line "view2: view")
line
(require '[clojure.string :as string])
(string/replace line value-regex "vista")
(def another-line "hi there %{first_name}, %{last_name}!")
another-line
lien
line
another-line
(string/replace another-line value-regex "vista")
(string/replace line value-regex "vista")
(string/replace line value-regex (re-quote-replacement "vista"))
(string/replace line value-regex (string/re-quote-replacement "vista"))
exit
(def value "New member (%{member_email}) has just signed up!")
(require '[clojure.string :as string])
(def value-regex (re-pattern (str value "\\s*$")))
(str value "\\s*$")
(re-pattern (str value "\\s*$"))
(re-pattern (str value "\s*$"))
(re-pattern (str value "\\s*$"))
(re-pattern (re-quote-replacement (str value "\\s*$")))
(re-pattern (string/re-quote-replacement (str value "\\s*$")))
value
(re-pattern value)
(re-pattern "\\d+")
(re-pattern (string/re-quote-replacement (str value "\\s*$")))
value
(def value2 "New member (%\{member_email\}) has just signed up!")
(def value2 "New member (%\\{member_email\\}) has just signed up!")
value2
(re-pattern value2)
(re-pattern (string/re-quote-replacement (str value "\\s*$")))
(re-pattern (str value "\\s*$"))
(string/re-quote-replacement value)
(re-pattern (string/re-quote-replacement value))
(string/escape value)
(string/escape value { "{" "\\{" "}", "\\}" })
(string/escape value { "{" "\\{" "}" "\\}" })
(string/escape value { "{" "\\{" "}" "\\}" "%" "\\%" })
(re-pattern (string/escape value { "{" "\\{" "}" "\\}" "%" "\\%" }))
value
(string/replace value #"\%\{\}" "\\$1")
(re-pattern (string/replace value #"\%\{\}" "\\$1"))
(string/replace value #"\%\{\}" "\\//$1")
(string/replace value #"\%\{\}" "\\//\\1")
(string/replace value #"\%\{\}" "\\1")
(string/replace value #"\%\{\}" "\\1\\1")
(string/escape value { "%" "\\%" })
(string/escape value { "%" "\\%", "{" "\\{", "}" "\\}" })
value
(import '[java.util.regex Pattern])
(re-pattern value)
(re-pattern (Pattern/quote value))
exit
(def line "view2: view")
line
(def value "view")
value
(def value-regex (-> (str value "\\s*$") Pattern/quote re-pattern))
value-regex
(string/replace line value-regex "vista")
(string/replace line #"view" "vista")
(string/replace line #"view\s*$" "vista")
(def value-regex (-> (str value "\s*$") Pattern/quote re-pattern))
(def value-regex (-> (str value #"\s*$") Pattern/quote re-pattern))
value-regex
(def value-regex (-> (str value #"\s*$") re-pattern))
value-regex
(string/replace line value-regex "vista")
value
(str value #"\s*$")
(re-pattern (str value #"\s*$"))
exit
(def line "view2: view")
line
(def value "view")
value
(def line "view2: %{here} view")
line
(def value "%{here} view")
value
(def value-regex (re-pattern (str value #"\s*$")))
(def value-regex (re-pattern (str "%\{here\}" #"\s*$")))
(def value-regex (re-pattern (str "\%\{here\}" #"\s*$")))
(def value-regex (re-pattern (str value #"\s*$")))
(def value-regex (Pattern/compile (str value #"\s*$")))
(def value-regex (Pattern/compile (Pattern/quote (str value #"\s*$"))))
value-regex
line
(string/replace line value-regex "vista")
(def value-regex (Pattern/compile (string/re-quote-replacement (str value #"\s*$"))))
(string/replace line value-regex "vista")
(def value-regex (Pattern/compile (Pattern/quote (str value "\\s*$"))))
value-regex
(string/replace line value-regex "vista")
(def value-regex (Pattern/compile (str value "\\s*$")))
(str value "\\s*$")
(Pattern/compile "{hi} there")
(Pattern/compile "\{hi\} there")
(Pattern/compile "\\{hi\\} there")
value
(def value "%\\{here\\} view")
(re-pattern value)
(string/replace line (re-pattern value) "vista")
line
value
(def value "%{here} view")
value
(string/replace value #"[\{\}]" "\\\\1")
(string/replace value #"[\{\}]" "\\\\$1")
(string/replace value #"[\{\}]" "\\$1")
(string/replace value #"([\{\}])" "\\$1")
(string/replace value #"([\{\}])" "$1")
(string/replace value #"[\{\}]" "$1")
(string/replace value #"[\{\}]" "$0")
(string/replace value #"([\{\}])" "$0")
(string/replace value #"([\{\}])" "$1")
(string/replace value #"([\{\}])" "$2")
(string/replace value #"[(\{)(\})]" "$1")
(string/replace value #"(\{|\})" "$1")
(string/replace value #"(\{|\})" "\\$1")
(string/replace value #"(\{|\})" "$1ay")
(string/replace value #"(\{|\})" "\\\\$1")
(string/replace value #"[\{\}]" "\\\\$1")
(string/replace value #"([\{\}])" "\\\\$1")
exit
(format "\"%s\"" "hello")
(format "\"%s\" # Comment" "hello")
exit
